name: Sync2DockerHub

on:
  push:
    tags:
      - '*-surenkid-*'

jobs:
  sync:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v2

      - name: Parse tag
        id: parseTag
        run: |
          tagName="$(echo ${{ github.ref }} | sed 's/refs\/tags\///')"
          imageName="$(echo "${tagName}" | cut -d "_" -f 1)"
          imageTag="$(echo "${tagName}" | cut -d "_" -f 2)"

          echo "Image: $imageName, Tag: $imageTag"

          echo "::set-output name=imageName::$imageName"
          echo "::set-output name=imageTag::$imageTag"

      - name: Load config
        id: loadConfig
        run: |
          config=$(cat config.json)
          echo "::set-output name=config::$config"

      - name: Find image config
        id: findConfig
        run: |
          imageName="${{ steps.parseTag.outputs.imageName }}"
          config="${{ steps.loadConfig.outputs.config }}"
          imageConfig=$(echo "$config" | jq ".images[] | select(.name == \"$imageName\")")
          echo "::set-output name=imageConfig::$imageConfig"
        shell: bash

      - name: Check image config
        run: |
          imageConfig="${{ steps.findConfig.outputs.imageConfig }}"
          if [ -z "$imageConfig" ]; then
            echo "Error: Could not find config for the image."
            exit 1
          else
            echo "Config found for the image."
          fi
          
      - name: Login to Docker Hub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Sync to Docker Hub
        run: |
          imageConfig="${{ steps.findConfig.outputs.imageConfig }}"
          source=$(echo "$imageConfig" | jq -r '.source')
          target=$(echo "$imageConfig" | jq -r '.target')
          imageTag="${{ steps.parseTag.outputs.imageTag }}"

          echo "Syncing ${source}:${imageTag} to ${target}:${imageTag}"

          docker pull $source:$imageTag
          docker tag $source:$imageTag $target:$imageTag
          docker push $target:$imageTag
        env:
          DOCKER_CLI_EXPERIMENTAL: enabled
          DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
          DOCKER_PASSWORD: ${{ secrets.DOCKER_PASSWORD }}
